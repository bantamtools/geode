// Autogenerated by exact/gen-exact.  Do not edit directly!

static_assert(sizeof(mp_limb_t)==8 && sizeof(Quantized)==8,
              "The generated routines below are for 64-bit use only");

#define ADDER(op,i) { \
  const auto t = __uint128_t(x.n[i]) op y.n[i] op carry; \
  carry = t>>64; \
  r.n[i] = uint64_t(t); }
GEODE_PURE static inline Exact<1> operator+(const Exact<1> x, const Exact<1> y) {
  Exact<1> r(uninit);
  bool carry = 0;
  ADDER(+,0)
  return r;
}
GEODE_PURE static inline Exact<1> operator-(const Exact<1> x, const Exact<1> y) {
  Exact<1> r(uninit);
  bool carry = 0;
  ADDER(-,0)
  return r;
}
GEODE_PURE static inline Exact<2> operator+(const Exact<2> x, const Exact<2> y) {
  Exact<2> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1)
  return r;
}
GEODE_PURE static inline Exact<2> operator-(const Exact<2> x, const Exact<2> y) {
  Exact<2> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1)
  return r;
}
GEODE_PURE static inline Exact<3> operator+(const Exact<3> x, const Exact<3> y) {
  Exact<3> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1) ADDER(+,2)
  return r;
}
GEODE_PURE static inline Exact<3> operator-(const Exact<3> x, const Exact<3> y) {
  Exact<3> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1) ADDER(-,2)
  return r;
}
GEODE_PURE static inline Exact<4> operator+(const Exact<4> x, const Exact<4> y) {
  Exact<4> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1) ADDER(+,2) ADDER(+,3)
  return r;
}
GEODE_PURE static inline Exact<4> operator-(const Exact<4> x, const Exact<4> y) {
  Exact<4> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1) ADDER(-,2) ADDER(-,3)
  return r;
}
GEODE_PURE static inline Exact<5> operator+(const Exact<5> x, const Exact<5> y) {
  Exact<5> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1) ADDER(+,2) ADDER(+,3) ADDER(+,4)
  return r;
}
GEODE_PURE static inline Exact<5> operator-(const Exact<5> x, const Exact<5> y) {
  Exact<5> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1) ADDER(-,2) ADDER(-,3) ADDER(-,4)
  return r;
}
GEODE_PURE static inline Exact<6> operator+(const Exact<6> x, const Exact<6> y) {
  Exact<6> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1) ADDER(+,2) ADDER(+,3) ADDER(+,4) ADDER(+,5)
  return r;
}
GEODE_PURE static inline Exact<6> operator-(const Exact<6> x, const Exact<6> y) {
  Exact<6> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1) ADDER(-,2) ADDER(-,3) ADDER(-,4) ADDER(-,5)
  return r;
}
GEODE_PURE static inline Exact<7> operator+(const Exact<7> x, const Exact<7> y) {
  Exact<7> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1) ADDER(+,2) ADDER(+,3) ADDER(+,4) ADDER(+,5) ADDER(+,6)
  return r;
}
GEODE_PURE static inline Exact<7> operator-(const Exact<7> x, const Exact<7> y) {
  Exact<7> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1) ADDER(-,2) ADDER(-,3) ADDER(-,4) ADDER(-,5) ADDER(-,6)
  return r;
}
GEODE_PURE static inline Exact<8> operator+(const Exact<8> x, const Exact<8> y) {
  Exact<8> r(uninit);
  bool carry = 0;
  ADDER(+,0) ADDER(+,1) ADDER(+,2) ADDER(+,3) ADDER(+,4) ADDER(+,5) ADDER(+,6) ADDER(+,7)
  return r;
}
GEODE_PURE static inline Exact<8> operator-(const Exact<8> x, const Exact<8> y) {
  Exact<8> r(uninit);
  bool carry = 0;
  ADDER(-,0) ADDER(-,1) ADDER(-,2) ADDER(-,3) ADDER(-,4) ADDER(-,5) ADDER(-,6) ADDER(-,7)
  return r;
}
GEODE_PURE static inline Exact<2> operator*(const Exact<1> x, const Exact<1> y) {
  Exact<2> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(int64_t(x.n[0]))*B(int64_t(y.n[0]));
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  r.n[0] = uint64_t(t1);
  r.n[1] = uint64_t(t2);
  return r;
}
GEODE_PURE static inline Exact<2> sqr(const Exact<1> x) {
  Exact<2> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(int64_t(x.n[0]))*B(int64_t(x.n[0]));
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  r.n[0] = uint64_t(t1);
  r.n[1] = uint64_t(t2);
  return r;
}
GEODE_PURE static inline Exact<3> operator*(const Exact<2> x, const Exact<1> y) {
  Exact<3> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(int64_t(y.n[0]));
  const auto t1 = uint64_t(t0);
  const auto t2 = int64_t(t0>>64);
  const auto t3 = B(int64_t(x.n[1]))*B(int64_t(y.n[0]));
  const auto t4 = uint64_t(t3);
  const auto t5 = uint64_t(t3>>64);
  r.n[0] = uint64_t(t1);
  const auto t6 = B(t2)+B(t4);
  r.n[1] = uint64_t(t6);
  const auto t7 = int64_t(t6>>64);
  const auto t8 = B(t5)+B(t7);
  r.n[2] = uint64_t(t8);
  return r;
}
GEODE_PURE static inline Exact<4> operator*(const Exact<2> x, const Exact<2> y) {
  Exact<4> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(int64_t(y.n[1]));
  const auto t4 = uint64_t(t3);
  const auto t5 = int64_t(t3>>64);
  const auto t6 = B(int64_t(x.n[1]))*B(y.n[0]);
  const auto t7 = uint64_t(t6);
  const auto t8 = int64_t(t6>>64);
  const auto t9 = B(int64_t(x.n[1]))*B(int64_t(y.n[1]));
  const auto t10 = uint64_t(t9);
  const auto t11 = uint64_t(t9>>64);
  r.n[0] = uint64_t(t1);
  const auto t12 = B(t2)+B(t4)+B(t7);
  r.n[1] = uint64_t(t12);
  const auto t13 = int64_t(t12>>64);
  const auto t14 = B(t5)+B(t8)+B(t10)+B(t13);
  r.n[2] = uint64_t(t14);
  const auto t15 = int64_t(t14>>64);
  const auto t16 = B(t11)+B(t15);
  r.n[3] = uint64_t(t16);
  return r;
}
GEODE_PURE static inline Exact<4> sqr(const Exact<2> x) {
  Exact<4> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(x.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(int64_t(x.n[1]));
  const auto t4 = uint64_t(t3);
  const auto t5 = int64_t(t3>>64);
  const auto t6 = B(int64_t(x.n[1]))*B(x.n[0]);
  const auto t7 = uint64_t(t6);
  const auto t8 = int64_t(t6>>64);
  const auto t9 = B(int64_t(x.n[1]))*B(int64_t(x.n[1]));
  const auto t10 = uint64_t(t9);
  const auto t11 = uint64_t(t9>>64);
  r.n[0] = uint64_t(t1);
  const auto t12 = B(t2)+B(t4)+B(t7);
  r.n[1] = uint64_t(t12);
  const auto t13 = int64_t(t12>>64);
  const auto t14 = B(t5)+B(t8)+B(t10)+B(t13);
  r.n[2] = uint64_t(t14);
  const auto t15 = int64_t(t14>>64);
  const auto t16 = B(t11)+B(t15);
  r.n[3] = uint64_t(t16);
  return r;
}
GEODE_PURE static inline Exact<4> operator*(const Exact<3> x, const Exact<1> y) {
  Exact<4> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(int64_t(y.n[0]));
  const auto t1 = uint64_t(t0);
  const auto t2 = int64_t(t0>>64);
  const auto t3 = B(x.n[1])*B(int64_t(y.n[0]));
  const auto t4 = uint64_t(t3);
  const auto t5 = int64_t(t3>>64);
  const auto t6 = B(int64_t(x.n[2]))*B(int64_t(y.n[0]));
  const auto t7 = uint64_t(t6);
  const auto t8 = uint64_t(t6>>64);
  r.n[0] = uint64_t(t1);
  const auto t9 = B(t2)+B(t4);
  r.n[1] = uint64_t(t9);
  const auto t10 = int64_t(t9>>64);
  const auto t11 = B(t5)+B(t7)+B(t10);
  r.n[2] = uint64_t(t11);
  const auto t12 = int64_t(t11>>64);
  const auto t13 = B(t8)+B(t12);
  r.n[3] = uint64_t(t13);
  return r;
}
GEODE_PURE static inline Exact<5> operator*(const Exact<3> x, const Exact<2> y) {
  Exact<5> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(int64_t(y.n[1]));
  const auto t4 = uint64_t(t3);
  const auto t5 = int64_t(t3>>64);
  const auto t6 = B(x.n[1])*B(y.n[0]);
  const auto t7 = uint64_t(t6);
  const auto t8 = uint64_t(t6>>64);
  const auto t9 = B(x.n[1])*B(int64_t(y.n[1]));
  const auto t10 = uint64_t(t9);
  const auto t11 = int64_t(t9>>64);
  const auto t12 = B(int64_t(x.n[2]))*B(y.n[0]);
  const auto t13 = uint64_t(t12);
  const auto t14 = int64_t(t12>>64);
  const auto t15 = B(int64_t(x.n[2]))*B(int64_t(y.n[1]));
  const auto t16 = uint64_t(t15);
  const auto t17 = uint64_t(t15>>64);
  r.n[0] = uint64_t(t1);
  const auto t18 = B(t2)+B(t4)+B(t7);
  r.n[1] = uint64_t(t18);
  const auto t19 = int64_t(t18>>64);
  const auto t20 = B(t5)+B(t8)+B(t10)+B(t13)+B(t19);
  r.n[2] = uint64_t(t20);
  const auto t21 = int64_t(t20>>64);
  const auto t22 = B(t11)+B(t14)+B(t16)+B(t21);
  r.n[3] = uint64_t(t22);
  const auto t23 = int64_t(t22>>64);
  const auto t24 = B(t17)+B(t23);
  r.n[4] = uint64_t(t24);
  return r;
}
GEODE_PURE static inline Exact<6> operator*(const Exact<3> x, const Exact<3> y) {
  Exact<6> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(y.n[1]);
  const auto t4 = uint64_t(t3);
  const auto t5 = uint64_t(t3>>64);
  const auto t6 = B(x.n[0])*B(int64_t(y.n[2]));
  const auto t7 = uint64_t(t6);
  const auto t8 = int64_t(t6>>64);
  const auto t9 = B(x.n[1])*B(y.n[0]);
  const auto t10 = uint64_t(t9);
  const auto t11 = uint64_t(t9>>64);
  const auto t12 = B(x.n[1])*B(y.n[1]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[1])*B(int64_t(y.n[2]));
  const auto t16 = uint64_t(t15);
  const auto t17 = int64_t(t15>>64);
  const auto t18 = B(int64_t(x.n[2]))*B(y.n[0]);
  const auto t19 = uint64_t(t18);
  const auto t20 = int64_t(t18>>64);
  const auto t21 = B(int64_t(x.n[2]))*B(y.n[1]);
  const auto t22 = uint64_t(t21);
  const auto t23 = int64_t(t21>>64);
  const auto t24 = B(int64_t(x.n[2]))*B(int64_t(y.n[2]));
  const auto t25 = uint64_t(t24);
  const auto t26 = uint64_t(t24>>64);
  r.n[0] = uint64_t(t1);
  const auto t27 = B(t2)+B(t4)+B(t10);
  r.n[1] = uint64_t(t27);
  const auto t28 = int64_t(t27>>64);
  const auto t29 = B(t5)+B(t7)+B(t11)+B(t13)+B(t19)+B(t28);
  r.n[2] = uint64_t(t29);
  const auto t30 = int64_t(t29>>64);
  const auto t31 = B(t8)+B(t14)+B(t16)+B(t20)+B(t22)+B(t30);
  r.n[3] = uint64_t(t31);
  const auto t32 = int64_t(t31>>64);
  const auto t33 = B(t17)+B(t23)+B(t25)+B(t32);
  r.n[4] = uint64_t(t33);
  const auto t34 = int64_t(t33>>64);
  const auto t35 = B(t26)+B(t34);
  r.n[5] = uint64_t(t35);
  return r;
}
GEODE_PURE static inline Exact<6> sqr(const Exact<3> x) {
  Exact<6> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(x.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(x.n[1]);
  const auto t4 = uint64_t(t3);
  const auto t5 = uint64_t(t3>>64);
  const auto t6 = B(x.n[0])*B(int64_t(x.n[2]));
  const auto t7 = uint64_t(t6);
  const auto t8 = int64_t(t6>>64);
  const auto t9 = B(x.n[1])*B(x.n[0]);
  const auto t10 = uint64_t(t9);
  const auto t11 = uint64_t(t9>>64);
  const auto t12 = B(x.n[1])*B(x.n[1]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[1])*B(int64_t(x.n[2]));
  const auto t16 = uint64_t(t15);
  const auto t17 = int64_t(t15>>64);
  const auto t18 = B(int64_t(x.n[2]))*B(x.n[0]);
  const auto t19 = uint64_t(t18);
  const auto t20 = int64_t(t18>>64);
  const auto t21 = B(int64_t(x.n[2]))*B(x.n[1]);
  const auto t22 = uint64_t(t21);
  const auto t23 = int64_t(t21>>64);
  const auto t24 = B(int64_t(x.n[2]))*B(int64_t(x.n[2]));
  const auto t25 = uint64_t(t24);
  const auto t26 = uint64_t(t24>>64);
  r.n[0] = uint64_t(t1);
  const auto t27 = B(t2)+B(t4)+B(t10);
  r.n[1] = uint64_t(t27);
  const auto t28 = int64_t(t27>>64);
  const auto t29 = B(t5)+B(t7)+B(t11)+B(t13)+B(t19)+B(t28);
  r.n[2] = uint64_t(t29);
  const auto t30 = int64_t(t29>>64);
  const auto t31 = B(t8)+B(t14)+B(t16)+B(t20)+B(t22)+B(t30);
  r.n[3] = uint64_t(t31);
  const auto t32 = int64_t(t31>>64);
  const auto t33 = B(t17)+B(t23)+B(t25)+B(t32);
  r.n[4] = uint64_t(t33);
  const auto t34 = int64_t(t33>>64);
  const auto t35 = B(t26)+B(t34);
  r.n[5] = uint64_t(t35);
  return r;
}
GEODE_PURE static inline Exact<6> operator*(const Exact<4> x, const Exact<2> y) {
  Exact<6> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(int64_t(y.n[1]));
  const auto t4 = uint64_t(t3);
  const auto t5 = int64_t(t3>>64);
  const auto t6 = B(x.n[1])*B(y.n[0]);
  const auto t7 = uint64_t(t6);
  const auto t8 = uint64_t(t6>>64);
  const auto t9 = B(x.n[1])*B(int64_t(y.n[1]));
  const auto t10 = uint64_t(t9);
  const auto t11 = int64_t(t9>>64);
  const auto t12 = B(x.n[2])*B(y.n[0]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[2])*B(int64_t(y.n[1]));
  const auto t16 = uint64_t(t15);
  const auto t17 = int64_t(t15>>64);
  const auto t18 = B(int64_t(x.n[3]))*B(y.n[0]);
  const auto t19 = uint64_t(t18);
  const auto t20 = int64_t(t18>>64);
  const auto t21 = B(int64_t(x.n[3]))*B(int64_t(y.n[1]));
  const auto t22 = uint64_t(t21);
  const auto t23 = uint64_t(t21>>64);
  r.n[0] = uint64_t(t1);
  const auto t24 = B(t2)+B(t4)+B(t7);
  r.n[1] = uint64_t(t24);
  const auto t25 = int64_t(t24>>64);
  const auto t26 = B(t5)+B(t8)+B(t10)+B(t13)+B(t25);
  r.n[2] = uint64_t(t26);
  const auto t27 = int64_t(t26>>64);
  const auto t28 = B(t11)+B(t14)+B(t16)+B(t19)+B(t27);
  r.n[3] = uint64_t(t28);
  const auto t29 = int64_t(t28>>64);
  const auto t30 = B(t17)+B(t20)+B(t22)+B(t29);
  r.n[4] = uint64_t(t30);
  const auto t31 = int64_t(t30>>64);
  const auto t32 = B(t23)+B(t31);
  r.n[5] = uint64_t(t32);
  return r;
}
GEODE_PURE static inline Exact<8> operator*(const Exact<4> x, const Exact<4> y) {
  Exact<8> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(y.n[1]);
  const auto t4 = uint64_t(t3);
  const auto t5 = uint64_t(t3>>64);
  const auto t6 = B(x.n[0])*B(y.n[2]);
  const auto t7 = uint64_t(t6);
  const auto t8 = uint64_t(t6>>64);
  const auto t9 = B(x.n[0])*B(int64_t(y.n[3]));
  const auto t10 = uint64_t(t9);
  const auto t11 = int64_t(t9>>64);
  const auto t12 = B(x.n[1])*B(y.n[0]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[1])*B(y.n[1]);
  const auto t16 = uint64_t(t15);
  const auto t17 = uint64_t(t15>>64);
  const auto t18 = B(x.n[1])*B(y.n[2]);
  const auto t19 = uint64_t(t18);
  const auto t20 = uint64_t(t18>>64);
  const auto t21 = B(x.n[1])*B(int64_t(y.n[3]));
  const auto t22 = uint64_t(t21);
  const auto t23 = int64_t(t21>>64);
  const auto t24 = B(x.n[2])*B(y.n[0]);
  const auto t25 = uint64_t(t24);
  const auto t26 = uint64_t(t24>>64);
  const auto t27 = B(x.n[2])*B(y.n[1]);
  const auto t28 = uint64_t(t27);
  const auto t29 = uint64_t(t27>>64);
  const auto t30 = B(x.n[2])*B(y.n[2]);
  const auto t31 = uint64_t(t30);
  const auto t32 = uint64_t(t30>>64);
  const auto t33 = B(x.n[2])*B(int64_t(y.n[3]));
  const auto t34 = uint64_t(t33);
  const auto t35 = int64_t(t33>>64);
  const auto t36 = B(int64_t(x.n[3]))*B(y.n[0]);
  const auto t37 = uint64_t(t36);
  const auto t38 = int64_t(t36>>64);
  const auto t39 = B(int64_t(x.n[3]))*B(y.n[1]);
  const auto t40 = uint64_t(t39);
  const auto t41 = int64_t(t39>>64);
  const auto t42 = B(int64_t(x.n[3]))*B(y.n[2]);
  const auto t43 = uint64_t(t42);
  const auto t44 = int64_t(t42>>64);
  const auto t45 = B(int64_t(x.n[3]))*B(int64_t(y.n[3]));
  const auto t46 = uint64_t(t45);
  const auto t47 = uint64_t(t45>>64);
  r.n[0] = uint64_t(t1);
  const auto t48 = B(t2)+B(t4)+B(t13);
  r.n[1] = uint64_t(t48);
  const auto t49 = int64_t(t48>>64);
  const auto t50 = B(t5)+B(t7)+B(t14)+B(t16)+B(t25)+B(t49);
  r.n[2] = uint64_t(t50);
  const auto t51 = int64_t(t50>>64);
  const auto t52 = B(t8)+B(t10)+B(t17)+B(t19)+B(t26)+B(t28)+B(t37)+B(t51);
  r.n[3] = uint64_t(t52);
  const auto t53 = int64_t(t52>>64);
  const auto t54 = B(t11)+B(t20)+B(t22)+B(t29)+B(t31)+B(t38)+B(t40)+B(t53);
  r.n[4] = uint64_t(t54);
  const auto t55 = int64_t(t54>>64);
  const auto t56 = B(t23)+B(t32)+B(t34)+B(t41)+B(t43)+B(t55);
  r.n[5] = uint64_t(t56);
  const auto t57 = int64_t(t56>>64);
  const auto t58 = B(t35)+B(t44)+B(t46)+B(t57);
  r.n[6] = uint64_t(t58);
  const auto t59 = int64_t(t58>>64);
  const auto t60 = B(t47)+B(t59);
  r.n[7] = uint64_t(t60);
  return r;
}
GEODE_PURE static inline Exact<8> sqr(const Exact<4> x) {
  Exact<8> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(x.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(x.n[1]);
  const auto t4 = uint64_t(t3);
  const auto t5 = uint64_t(t3>>64);
  const auto t6 = B(x.n[0])*B(x.n[2]);
  const auto t7 = uint64_t(t6);
  const auto t8 = uint64_t(t6>>64);
  const auto t9 = B(x.n[0])*B(int64_t(x.n[3]));
  const auto t10 = uint64_t(t9);
  const auto t11 = int64_t(t9>>64);
  const auto t12 = B(x.n[1])*B(x.n[0]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[1])*B(x.n[1]);
  const auto t16 = uint64_t(t15);
  const auto t17 = uint64_t(t15>>64);
  const auto t18 = B(x.n[1])*B(x.n[2]);
  const auto t19 = uint64_t(t18);
  const auto t20 = uint64_t(t18>>64);
  const auto t21 = B(x.n[1])*B(int64_t(x.n[3]));
  const auto t22 = uint64_t(t21);
  const auto t23 = int64_t(t21>>64);
  const auto t24 = B(x.n[2])*B(x.n[0]);
  const auto t25 = uint64_t(t24);
  const auto t26 = uint64_t(t24>>64);
  const auto t27 = B(x.n[2])*B(x.n[1]);
  const auto t28 = uint64_t(t27);
  const auto t29 = uint64_t(t27>>64);
  const auto t30 = B(x.n[2])*B(x.n[2]);
  const auto t31 = uint64_t(t30);
  const auto t32 = uint64_t(t30>>64);
  const auto t33 = B(x.n[2])*B(int64_t(x.n[3]));
  const auto t34 = uint64_t(t33);
  const auto t35 = int64_t(t33>>64);
  const auto t36 = B(int64_t(x.n[3]))*B(x.n[0]);
  const auto t37 = uint64_t(t36);
  const auto t38 = int64_t(t36>>64);
  const auto t39 = B(int64_t(x.n[3]))*B(x.n[1]);
  const auto t40 = uint64_t(t39);
  const auto t41 = int64_t(t39>>64);
  const auto t42 = B(int64_t(x.n[3]))*B(x.n[2]);
  const auto t43 = uint64_t(t42);
  const auto t44 = int64_t(t42>>64);
  const auto t45 = B(int64_t(x.n[3]))*B(int64_t(x.n[3]));
  const auto t46 = uint64_t(t45);
  const auto t47 = uint64_t(t45>>64);
  r.n[0] = uint64_t(t1);
  const auto t48 = B(t2)+B(t4)+B(t13);
  r.n[1] = uint64_t(t48);
  const auto t49 = int64_t(t48>>64);
  const auto t50 = B(t5)+B(t7)+B(t14)+B(t16)+B(t25)+B(t49);
  r.n[2] = uint64_t(t50);
  const auto t51 = int64_t(t50>>64);
  const auto t52 = B(t8)+B(t10)+B(t17)+B(t19)+B(t26)+B(t28)+B(t37)+B(t51);
  r.n[3] = uint64_t(t52);
  const auto t53 = int64_t(t52>>64);
  const auto t54 = B(t11)+B(t20)+B(t22)+B(t29)+B(t31)+B(t38)+B(t40)+B(t53);
  r.n[4] = uint64_t(t54);
  const auto t55 = int64_t(t54>>64);
  const auto t56 = B(t23)+B(t32)+B(t34)+B(t41)+B(t43)+B(t55);
  r.n[5] = uint64_t(t56);
  const auto t57 = int64_t(t56>>64);
  const auto t58 = B(t35)+B(t44)+B(t46)+B(t57);
  r.n[6] = uint64_t(t58);
  const auto t59 = int64_t(t58>>64);
  const auto t60 = B(t47)+B(t59);
  r.n[7] = uint64_t(t60);
  return r;
}
GEODE_PURE static inline Exact<8> operator*(const Exact<6> x, const Exact<2> y) {
  Exact<8> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(int64_t(y.n[1]));
  const auto t4 = uint64_t(t3);
  const auto t5 = int64_t(t3>>64);
  const auto t6 = B(x.n[1])*B(y.n[0]);
  const auto t7 = uint64_t(t6);
  const auto t8 = uint64_t(t6>>64);
  const auto t9 = B(x.n[1])*B(int64_t(y.n[1]));
  const auto t10 = uint64_t(t9);
  const auto t11 = int64_t(t9>>64);
  const auto t12 = B(x.n[2])*B(y.n[0]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[2])*B(int64_t(y.n[1]));
  const auto t16 = uint64_t(t15);
  const auto t17 = int64_t(t15>>64);
  const auto t18 = B(x.n[3])*B(y.n[0]);
  const auto t19 = uint64_t(t18);
  const auto t20 = uint64_t(t18>>64);
  const auto t21 = B(x.n[3])*B(int64_t(y.n[1]));
  const auto t22 = uint64_t(t21);
  const auto t23 = int64_t(t21>>64);
  const auto t24 = B(x.n[4])*B(y.n[0]);
  const auto t25 = uint64_t(t24);
  const auto t26 = uint64_t(t24>>64);
  const auto t27 = B(x.n[4])*B(int64_t(y.n[1]));
  const auto t28 = uint64_t(t27);
  const auto t29 = int64_t(t27>>64);
  const auto t30 = B(int64_t(x.n[5]))*B(y.n[0]);
  const auto t31 = uint64_t(t30);
  const auto t32 = int64_t(t30>>64);
  const auto t33 = B(int64_t(x.n[5]))*B(int64_t(y.n[1]));
  const auto t34 = uint64_t(t33);
  const auto t35 = uint64_t(t33>>64);
  r.n[0] = uint64_t(t1);
  const auto t36 = B(t2)+B(t4)+B(t7);
  r.n[1] = uint64_t(t36);
  const auto t37 = int64_t(t36>>64);
  const auto t38 = B(t5)+B(t8)+B(t10)+B(t13)+B(t37);
  r.n[2] = uint64_t(t38);
  const auto t39 = int64_t(t38>>64);
  const auto t40 = B(t11)+B(t14)+B(t16)+B(t19)+B(t39);
  r.n[3] = uint64_t(t40);
  const auto t41 = int64_t(t40>>64);
  const auto t42 = B(t17)+B(t20)+B(t22)+B(t25)+B(t41);
  r.n[4] = uint64_t(t42);
  const auto t43 = int64_t(t42>>64);
  const auto t44 = B(t23)+B(t26)+B(t28)+B(t31)+B(t43);
  r.n[5] = uint64_t(t44);
  const auto t45 = int64_t(t44>>64);
  const auto t46 = B(t29)+B(t32)+B(t34)+B(t45);
  r.n[6] = uint64_t(t46);
  const auto t47 = int64_t(t46>>64);
  const auto t48 = B(t35)+B(t47);
  r.n[7] = uint64_t(t48);
  return r;
}
GEODE_PURE static inline Exact<9> operator*(const Exact<6> x, const Exact<3> y) {
  Exact<9> r(uninit);
  typedef __uint128_t B;
  const auto t0 = B(x.n[0])*B(y.n[0]);
  const auto t1 = uint64_t(t0);
  const auto t2 = uint64_t(t0>>64);
  const auto t3 = B(x.n[0])*B(y.n[1]);
  const auto t4 = uint64_t(t3);
  const auto t5 = uint64_t(t3>>64);
  const auto t6 = B(x.n[0])*B(int64_t(y.n[2]));
  const auto t7 = uint64_t(t6);
  const auto t8 = int64_t(t6>>64);
  const auto t9 = B(x.n[1])*B(y.n[0]);
  const auto t10 = uint64_t(t9);
  const auto t11 = uint64_t(t9>>64);
  const auto t12 = B(x.n[1])*B(y.n[1]);
  const auto t13 = uint64_t(t12);
  const auto t14 = uint64_t(t12>>64);
  const auto t15 = B(x.n[1])*B(int64_t(y.n[2]));
  const auto t16 = uint64_t(t15);
  const auto t17 = int64_t(t15>>64);
  const auto t18 = B(x.n[2])*B(y.n[0]);
  const auto t19 = uint64_t(t18);
  const auto t20 = uint64_t(t18>>64);
  const auto t21 = B(x.n[2])*B(y.n[1]);
  const auto t22 = uint64_t(t21);
  const auto t23 = uint64_t(t21>>64);
  const auto t24 = B(x.n[2])*B(int64_t(y.n[2]));
  const auto t25 = uint64_t(t24);
  const auto t26 = int64_t(t24>>64);
  const auto t27 = B(x.n[3])*B(y.n[0]);
  const auto t28 = uint64_t(t27);
  const auto t29 = uint64_t(t27>>64);
  const auto t30 = B(x.n[3])*B(y.n[1]);
  const auto t31 = uint64_t(t30);
  const auto t32 = uint64_t(t30>>64);
  const auto t33 = B(x.n[3])*B(int64_t(y.n[2]));
  const auto t34 = uint64_t(t33);
  const auto t35 = int64_t(t33>>64);
  const auto t36 = B(x.n[4])*B(y.n[0]);
  const auto t37 = uint64_t(t36);
  const auto t38 = uint64_t(t36>>64);
  const auto t39 = B(x.n[4])*B(y.n[1]);
  const auto t40 = uint64_t(t39);
  const auto t41 = uint64_t(t39>>64);
  const auto t42 = B(x.n[4])*B(int64_t(y.n[2]));
  const auto t43 = uint64_t(t42);
  const auto t44 = int64_t(t42>>64);
  const auto t45 = B(int64_t(x.n[5]))*B(y.n[0]);
  const auto t46 = uint64_t(t45);
  const auto t47 = int64_t(t45>>64);
  const auto t48 = B(int64_t(x.n[5]))*B(y.n[1]);
  const auto t49 = uint64_t(t48);
  const auto t50 = int64_t(t48>>64);
  const auto t51 = B(int64_t(x.n[5]))*B(int64_t(y.n[2]));
  const auto t52 = uint64_t(t51);
  const auto t53 = uint64_t(t51>>64);
  r.n[0] = uint64_t(t1);
  const auto t54 = B(t2)+B(t4)+B(t10);
  r.n[1] = uint64_t(t54);
  const auto t55 = int64_t(t54>>64);
  const auto t56 = B(t5)+B(t7)+B(t11)+B(t13)+B(t19)+B(t55);
  r.n[2] = uint64_t(t56);
  const auto t57 = int64_t(t56>>64);
  const auto t58 = B(t8)+B(t14)+B(t16)+B(t20)+B(t22)+B(t28)+B(t57);
  r.n[3] = uint64_t(t58);
  const auto t59 = int64_t(t58>>64);
  const auto t60 = B(t17)+B(t23)+B(t25)+B(t29)+B(t31)+B(t37)+B(t59);
  r.n[4] = uint64_t(t60);
  const auto t61 = int64_t(t60>>64);
  const auto t62 = B(t26)+B(t32)+B(t34)+B(t38)+B(t40)+B(t46)+B(t61);
  r.n[5] = uint64_t(t62);
  const auto t63 = int64_t(t62>>64);
  const auto t64 = B(t35)+B(t41)+B(t43)+B(t47)+B(t49)+B(t63);
  r.n[6] = uint64_t(t64);
  const auto t65 = int64_t(t64>>64);
  const auto t66 = B(t44)+B(t50)+B(t52)+B(t65);
  r.n[7] = uint64_t(t66);
  const auto t67 = int64_t(t66>>64);
  const auto t68 = B(t53)+B(t67);
  r.n[8] = uint64_t(t68);
  return r;
}
GEODE_PURE static inline Exact<1> operator<<(const Exact<1> x, const int s) {
  assert(unsigned(s)<3);
  Exact<1> r(uninit);
  const auto t0 = __uint128_t(x.n[0])<<s;
  r.n[0] = uint64_t(t0);
  return r;
}
GEODE_PURE static inline Exact<2> operator<<(const Exact<2> x, const int s) {
  assert(unsigned(s)<3);
  Exact<2> r(uninit);
  const auto t0 = __uint128_t(x.n[0])<<s;
  const auto t1 = __uint128_t(x.n[1])<<s;
  r.n[0] = uint64_t(t0);
  r.n[1] = uint64_t(t1) | uint64_t(t0>>64);
  return r;
}
GEODE_PURE static inline Exact<3> operator<<(const Exact<3> x, const int s) {
  assert(unsigned(s)<3);
  Exact<3> r(uninit);
  const auto t0 = __uint128_t(x.n[0])<<s;
  const auto t1 = __uint128_t(x.n[1])<<s;
  const auto t2 = __uint128_t(x.n[2])<<s;
  r.n[0] = uint64_t(t0);
  r.n[1] = uint64_t(t1) | uint64_t(t0>>64);
  r.n[2] = uint64_t(t2) | uint64_t(t1>>64);
  return r;
}
GEODE_PURE static inline Exact<4> operator<<(const Exact<4> x, const int s) {
  assert(unsigned(s)<3);
  Exact<4> r(uninit);
  const auto t0 = __uint128_t(x.n[0])<<s;
  const auto t1 = __uint128_t(x.n[1])<<s;
  const auto t2 = __uint128_t(x.n[2])<<s;
  const auto t3 = __uint128_t(x.n[3])<<s;
  r.n[0] = uint64_t(t0);
  r.n[1] = uint64_t(t1) | uint64_t(t0>>64);
  r.n[2] = uint64_t(t2) | uint64_t(t1>>64);
  r.n[3] = uint64_t(t3) | uint64_t(t2>>64);
  return r;
}
