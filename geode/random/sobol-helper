#!/usr/bin/env python

# Precomputed initialization for Sobol sequences
# For details, see Bratley and Fox. 1988. Algorithm 659: Implementing Sobol's quasirandom sequence generator. Acm Trans. Math. Softw. 14, 88-100.

from __future__ import division
from geode import *

# Polynomials over Z_2 represented in binary.  Up to 40 dimensions supported
polys = [1,3,7,11,13,19,25,37,59,47,61,55,41,67,97,91,109,103,115,131,193,137,145,143,241,157,185,167,229,171,213,191,253,203,211,239,247,285,369,299]

# Initial m values.  Dimension 0 is a special case.
ms = [None,[1],[1,1],[1,3,7],[1,1,5],[1,3,1,1],[1,1,3,7],[1,3,3,9,9],[1,3,7,13,3],[1,1,5,11,27],[1,3,5,1,15],[1,1,7,3,29],[1,3,7,7,21],[1,1,1,9,23,37],[1,3,3,5,19,33],[1,1,3,13,11,7],[1,1,7,13,25,5],[1,3,5,11,7,11],[1,1,1,3,13,39],[1,3,1,15,17,63,13],[1,1,5,5,1,27,33],[1,3,3,3,25,17,115],[1,1,3,15,29,15,41],[1,3,1,7,3,23,79],[1,3,7,9,31,29,17],[1,1,5,13,11,3,29],[1,3,1,9,5,21,119],[1,1,3,1,23,13,75],[1,3,3,11,27,31,73],[1,1,7,7,19,25,105],[1,3,5,5,21,9,7],[1,1,1,15,5,49,59],[1,1,1,1,1,33,65],[1,3,5,15,17,19,21],[1,1,7,11,13,29,3],[1,3,7,5,7,11,113],[1,1,5,3,15,19,61],[1,3,1,1,9,27,89,7],[1,1,3,7,31,15,45,23],[1,3,3,9,9,25,107,39]]

# Expand m
def expand(poly,m):
  if poly==1: # The first dimension is a special case
    return [1]*64
  d = int(log(poly)/log(2))
  a = [int(bool(poly&1<<(d-i))) for i in xrange(d+1)]
  while len(m)<64:
    n = m[-d]
    for i in xrange(1,d+1):
      n ^= a[i]*m[-i]<<i
    m.append(n)
  return m
ms = asarray([expand(p,m) for p,m in zip(polys,ms)])

# Print the first few, scaled to the correct number of bits
d = 4
print '// Generated by sobol-helper: DO NOT EDIT'
for bits,T,TI in (24,'float','uint32_t'),(53,'double','uint64_t'):
  vs = ms[:,:bits]<<(bits-arange(bits)-1)
  print 'template<> const %s Helper<%s>::vs[%d][%d] = {\n  %s};'%(TI,T,d,bits,',\n  '.join('{%s}'%','.join(map(str,v)) for v in vs[:d]))
