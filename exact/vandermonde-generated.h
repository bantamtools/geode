// Autogenerated LU factorization of the Vandermonde matrix for points 0,1,...,max_degree: DO NOT EDIT
// See exact/vandermonde and the comments in exact/perturb.cpp for details.
#pragma once

namespace other {

const int max_degree = 12;

// sigma(n,k) = tau_{n-k}(n)
static inline int sigma(const int n, const int k) {
  static const int table[78] = {0,0,-1,0,2,-3,0,-6,11,-6,0,24,-50,35,-10,0,-120,274,-225,85,-15,0,720,-1764,1624,-735,175,-21,0,-5040,13068,-13132,6769,-1960,322,-28,0,40320,-109584,118124,-67284,22449,-4536,546,-36,0,-362880,1026576,-1172700,723680,-269325,63273,-9450,870,-45,0,3628800,-10628640,12753576,-8409500,3416930,-902055,157773,-18150,1320,-55,0,-39916800,120543840,-150917976,105258076,-45995730,13339535,-2637558,357423,-32670,1925,-66};
  assert(unsigned(n)<=unsigned(max_degree) && unsigned(k)<unsigned(n));
  return table[n*(n-1)/2+k];
}

// Strict lower triangle of the LU decomposition, with row k multiplied by k! to clear fractions.
static inline int lower_triangle(const int n, const int k) {
  static const int16_t table[78] = {-1,1,-2,-1,3,-3,1,-4,6,-4,-1,5,-10,10,-5,1,-6,15,-20,15,-6,-1,7,-21,35,-35,21,-7,1,-8,28,-56,70,-56,28,-8,-1,9,-36,84,-126,126,-84,36,-9,1,-10,45,-120,210,-252,210,-120,45,-10,-1,11,-55,165,-330,462,-462,330,-165,55,-11,1,-12,66,-220,495,-792,924,-792,495,-220,66,-12};
  assert(unsigned(n)<=unsigned(max_degree) && unsigned(k)<unsigned(n));
  return table[n*(n-1)/2+k];
}

}
