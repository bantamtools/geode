// Exact geometric predicates
// Autogenerated by core/exact/simplicity: DO NOT EDIT

#include <othercore/exact/predicates-generated.h>
#include <othercore/exact/Interval.h>
#include <othercore/exact/Exact.h>
#include <othercore/exact/permutation_id.h>
#include <algorithm>
namespace other {

using exact::emul;
using exact::esqr;
using exact::ecube;
using std::lower_bound;

// Forward declare degeneracy handling routines
static bool incircle_degenerate(const int p0i, const Vector<exact::Int,2> p0, const int p1i, const Vector<exact::Int,2> p1, const int p2i, const Vector<exact::Int,2> p2, const int p3i, const Vector<exact::Int,2> p3) OTHER_COLD OTHER_NEVER_INLINE;
static bool triangle_oriented_degenerate(const int p0i, const Vector<exact::Int,2> p0, const int p1i, const Vector<exact::Int,2> p1, const int p2i, const Vector<exact::Int,2> p2) OTHER_COLD OTHER_NEVER_INLINE;
static bool segment_directions_oriented_degenerate(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int b0i, const Vector<exact::Int,2> b0, const int b1i, const Vector<exact::Int,2> b1) OTHER_COLD OTHER_NEVER_INLINE;
static bool segment_intersections_ordered_helper_degenerate(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int b0i, const Vector<exact::Int,2> b0, const int b1i, const Vector<exact::Int,2> b1, const int c0i, const Vector<exact::Int,2> c0, const int c1i, const Vector<exact::Int,2> c1) OTHER_COLD OTHER_NEVER_INLINE;
static bool segment_to_direction_oriented_degenerate(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int di, const Vector<exact::Int,2> d) OTHER_COLD OTHER_NEVER_INLINE;
static bool directions_oriented_degenerate(const int d0i, const Vector<exact::Int,2> d0, const int d1i, const Vector<exact::Int,2> d1) OTHER_COLD OTHER_NEVER_INLINE;

bool incircle(const int p0i, const Vector<exact::Int,2> p0, const int p1i, const Vector<exact::Int,2> p1, const int p2i, const Vector<exact::Int,2> p2, const int p3i, const Vector<exact::Int,2> p3) {
  // Evaluate constant term with exact integer arithmetic
  OTHER_UNUSED const exact::Int p0x(p0.x), p0y(p0.y), p1x(p1.x), p1y(p1.y), p2x(p2.x), p2y(p2.y), p3x(p3.x), p3y(p3.y);
  assert(p0x==p0.x && p0y==p0.y && p1x==p1.x && p1y==p1.y && p2x==p2.x && p2y==p2.y && p3x==p3.x && p3y==p3.y);
  const auto pred = emul(esqr(p1x-p3x)+esqr(p1y-p3y),emul(p2x-p3x,p0y-p3y)-emul(p0x-p3x,p2y-p3y))+emul(esqr(p2x-p3x)+esqr(p2y-p3y),emul(p0x-p3x,p1y-p3y)-emul(p1x-p3x,p0y-p3y))+emul(esqr(p0x-p3x)+esqr(p0y-p3y),emul(p1x-p3x,p2y-p3y)-emul(p2x-p3x,p1y-p3y));
  if (OTHER_EXPECT(bool(pred),true))
    return pred>0;

  // The constant term is exactly zero, so fall back to simulation of simplicity.
  return incircle_degenerate(p0i,p0,p1i,p1,p2i,p2,p3i,p3);
}

static bool incircle_degenerate(const int p0i, const Vector<exact::Int,2> p0, const int p1i, const Vector<exact::Int,2> p1, const int p2i, const Vector<exact::Int,2> p2, const int p3i, const Vector<exact::Int,2> p3) {
  // Compute input permutation
  int order[4] = {p0i,p1i,p2i,p3i};
  const int permutation = permutation_id(4,order);

  // Losslessly cast to integers
  OTHER_UNUSED const exact::Int p0x(p0.x), p0y(p0.y), p1x(p1.x), p1y(p1.y), p2x(p2.x), p2y(p2.y), p3x(p3.x), p3y(p3.y);

  // The constant term is zero, so we add infinitesimal shifts to each coordinate in the input, expand
  // the result as a multivariate polynomial, and evaluate one term at a time until we hit a nonzero.
  // Each coordinate gets a unique infinitesimal, each infinitely smaller than the last, so cancellation
  // of all of them together is impossible.  In total, the error polynomial has 161 terms, of which 56 are
  // unique (up to sign), but it usually suffices to evaluate only a few.

  // Different permutations produce different predicates.  To reduce code size,
  // we use lookup tables and a switch statement.  I.e., a tiny bytecode interpreter.
  static const uint16_t starts[24] = {0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,420,440,460};
  static const uint8_t terms[480] = {2,4,6,8,11,12,14,16,19,20,22,24,26,28,31,32,35,37,38,0,2,4,6,8,11,12,14,16,19,20,22,24,40,42,45,46,49,50,53,1,2,4,6,26,28,31,32,54,56,58,60,48,8,11,12,14,35,37,39,1,2,4,6,26,28,31,32,54,56,58,60,48,40,42,45,46,25,62,65,0,2,4,6,40,42,45,46,66,68,70,72,34,26,28,31,32,25,62,64,1,2,4,6,40,42,45,46,66,68,70,72,34,8,11,12,14,49,50,52,0,8,16,20,2,11,13,22,4,18,6,14,24,26,35,38,74,28,76,31,1,8,16,20,2,11,13,22,4,18,6,14,24,40,49,53,78,42,80,45,0,8,16,20,26,35,38,74,54,83,58,84,43,2,11,13,22,28,76,30,0,8,16,20,26,35,38,74,54,83,58,84,43,40,49,53,78,25,63,65,1,8,16,20,40,49,53,78,66,86,70,88,29,26,35,38,74,25,63,64,0,8,16,20,40,49,53,78,66,86,70,88,29,2,11,13,22,42,80,44,1,26,54,58,8,35,39,84,16,82,20,74,43,2,28,30,60,11,91,13,1,26,54,58,8,35,39,84,16,82,20,74,43,40,25,65,92,49,51,53,0,26,54,58,2,28,30,60,4,57,6,32,48,8,35,39,84,11,91,12,0,26,54,58,2,28,30,60,4,57,6,32,48,40,25,65,92,42,81,45,1,26,54,58,40,25,65,92,66,94,70,96,10,2,28,30,60,42,81,44,0,26,54,58,40,25,65,92,66,94,70,96,10,8,35,39,84,49,51,52,1,40,66,70,8,49,52,88,16,87,20,78,29,26,25,64,96,35,36,38,1,40,66,70,8,49,52,88,16,87,20,78,29,2,42,44,72,11,90,13,0,40,66,70,26,25,64,96,54,95,58,92,10,8,49,52,88,35,36,39,0,40,66,70,26,25,64,96,54,95,58,92,10,2,42,44,72,28,77,30,1,40,66,70,2,42,44,72,4,69,6,46,34,26,25,64,96,28,77,31,0,40,66,70,2,42,44,72,4,69,6,46,34,8,49,52,88,11,90,12,1};
  for (int i=starts[permutation];;i++) {
    const bool f = terms[i]&1;
    switch (terms[i]>>1) {
      case 0:
        return !f;
      case 1: {
        const auto term = emul(-2*p3x+2*p0x,emul(p1x-p3x,p2y-p3y)-emul(p2x-p3x,p1y-p3y))+emul(esqr(p2x-p3x)+esqr(p2y-p3y),p1y-p3y)+emul(esqr(p1x-p3x)+esqr(p1y-p3y),p3y-p2y);
        if (term) return f^(term>0); break; }
      case 2: {
        const auto term = emul(p1x-p3x,p2y-p3y)-emul(p2x-p3x,p1y-p3y);
        if (term) return f^(term>0); break; }
      case 3: {
        const auto term = emul(-2*p3y+2*p0y,emul(p1x-p3x,p2y-p3y)-emul(p2x-p3x,p1y-p3y))+emul(esqr(p1x-p3x)+esqr(p1y-p3y),p2x-p3x)+emul(esqr(p2x-p3x)+esqr(p2y-p3y),p3x-p1x);
        if (term) return f^(term>0); break; }
      case 4: {
        const auto term = emul(-2*p3x+2*p1x,emul(p2x-p3x,p0y-p3y)-emul(p0x-p3x,p2y-p3y))+emul(esqr(p2x-p3x)+esqr(p2y-p3y),p3y-p0y)+emul(esqr(p0x-p3x)+esqr(p0y-p3y),p2y-p3y);
        if (term) return f^(term>0); break; }
      case 5: {
        const auto term = emul(p1x-p0x,-2*p3y+2*p2y);
        if (term) return f^(term>0); break; }
      case 6: {
        const auto term = p2y-p3y;
        if (term) return f^(term>0); break; }
      case 7: {
        const auto term = emul(p2y-p3y,-2*p3y+2*p0y)+emul(p2x-p3x,-2*p3x+2*p1x)-esqr(p2x-p3x)-esqr(p2y-p3y);
        if (term) return f^(term>0); break; }
      case 8: {
        const auto term = emul(p2x-p3x,p0y-p3y)-emul(p0x-p3x,p2y-p3y);
        if (term) return f^(term>0); break; }
      case 9: {
        const auto term = p3x-p2x;
        if (term) return f^(term>0); break; }
      case 10: {
        const auto term = emul(esqr(p0x-p3x)+esqr(p0y-p3y),p3x-p2x)+emul(esqr(p2x-p3x)+esqr(p2y-p3y),p0x-p3x)+emul(-2*p3y+2*p1y,emul(p2x-p3x,p0y-p3y)-emul(p0x-p3x,p2y-p3y));
        if (term) return f^(term>0); break; }
      case 11: {
        const auto term = esqr(p2x-p3x)+esqr(p2y-p3y)+emul(p3y-p2y,-2*p3y+2*p1y)+emul(p3x-p2x,-2*p3x+2*p0x);
        if (term) return f^(term>0); break; }
      case 12: {
        const auto v0 = -2*p3y;
        const auto term = emul(p2x-p3x,v0+2*p1y)+emul(p3x-p2x,v0+2*p0y);
        if (term) return f^(term>0); break; }
      case 13: {
        const auto term = emul(-2*p3x+2*p2x,emul(p0x-p3x,p1y-p3y)-emul(p1x-p3x,p0y-p3y))+emul(esqr(p1x-p3x)+esqr(p1y-p3y),p0y-p3y)+emul(esqr(p0x-p3x)+esqr(p0y-p3y),p3y-p1y);
        if (term) return f^(term>0); break; }
      case 14: {
        const auto v0 = -2*p3x;
        const auto term = emul(p3y-p1y,v0+2*p0x)+emul(p1y-p3y,v0+2*p2x);
        if (term) return f^(term>0); break; }
      case 15: {
        const auto term = p1y-p3y;
        if (term) return f^(term>0); break; }
      case 16: {
        const auto term = esqr(p1x-p3x)+emul(p3x-p1x,-2*p3x+2*p2x)+esqr(p1y-p3y)+emul(p3y-p1y,-2*p3y+2*p0y);
        if (term) return f^(term>0); break; }
      case 17: {
        const auto term = emul(p2x-p1x,-2*p3y+2*p0y);
        if (term) return f^(term>0); break; }
      case 18: {
        const auto term = -2*p1x+2*p2x;
        if (term) return f^(term>0); break; }
      case 19: {
        const auto term = p0y-p3y;
        if (term) return f^(term>0); break; }
      case 20: {
        const auto v0 = 2*p3x;
        const auto term = emul(esqr(p0x-p3x)+esqr(p0y-p3y),p1y-p2y)+emul(-2*p0x+v0,emul(p1x-p3x,p2y-p3y)-emul(p2x-p3x,p1y-p3y))+emul(esqr(p1x-p3x)+esqr(p1y-p3y),p2y-p0y)+emul(-2*p2x+v0,emul(p0x-p3x,p1y-p3y)-emul(p1x-p3x,p0y-p3y))+emul(-2*p1x+v0,emul(p2x-p3x,p0y-p3y)-emul(p0x-p3x,p2y-p3y))+emul(esqr(p2x-p3x)+esqr(p2y-p3y),p0y-p1y);
        if (term) return f^(term>0); break; }
      case 21: {
        const auto term = emul(p1y-p2y,-2*p3x+2*p0x);
        if (term) return f^(term>0); break; }
      case 22: {
        const auto term = p2y-p1y;
        if (term) return f^(term>0); break; }
      case 23: {
        const auto term = emul(p1y-p2y,-2*p3y+2*p0y)+esqr(p2x-p3x)+esqr(p2y-p3y)-esqr(p1y-p3y)-esqr(p1x-p3x);
        if (term) return f^(term>0); break; }
      case 24: {
        const auto v0 = -2*p3y;
        const auto term = emul(p1x-p3x,v0+2*p0y)+emul(p3x-p1x,v0+2*p2y);
        if (term) return f^(term>0); break; }
      case 25: {
        const auto term = -2*p1x+2*p3x;
        if (term) return f^(term>0); break; }
      case 26: {
        const auto term = p0y-p2y;
        if (term) return f^(term>0); break; }
      case 27: {
        const auto term = emul(p0x-p3x,p1y-p3y)-emul(p1x-p3x,p0y-p3y);
        if (term) return f^(term>0); break; }
      case 28: {
        const auto term = p3x-p1x;
        if (term) return f^(term>0); break; }
      case 29: {
        const auto term = emul(esqr(p1x-p3x)+esqr(p1y-p3y),p3x-p0x)+emul(-2*p3y+2*p2y,emul(p0x-p3x,p1y-p3y)-emul(p1x-p3x,p0y-p3y))+emul(esqr(p0x-p3x)+esqr(p0y-p3y),p1x-p3x);
        if (term) return f^(term>0); break; }
      case 30: {
        const auto term = emul(p1y-p3y,-2*p3y+2*p2y)+emul(p1x-p3x,-2*p3x+2*p0x)-esqr(p1y-p3y)-esqr(p1x-p3x);
        if (term) return f^(term>0); break; }
      case 31: {
        const auto term = -2*p3x+2*p2x;
        if (term) return f^(term>0); break; }
      case 32: {
        const auto term = p1y-p0y;
        if (term) return f^(term>0); break; }
      case 33: {
        const auto v0 = 2*p3y;
        const auto term = emul(p1x-p0x,-2*p2y+v0)+emul(p0x-p3x,p1y-p3y)+emul(p2x-p1x,-2*p0y+v0)+emul(p2x-p3x,p0y-p3y)+emul(p0x-p2x,-2*p1y+v0)+emul(p1x-p3x,p2y-p3y)-emul(p1x-p3x,p0y-p3y)-emul(p2x-p3x,p1y-p3y)-emul(p0x-p3x,p2y-p3y);
        if (term) return f^(term>0); break; }
      case 34: {
        const auto term = p1x-p2x;
        if (term) return f^(term>0); break; }
      case 35: {
        const auto v0 = 2*p3y;
        const auto term = emul(esqr(p2x-p3x)+esqr(p2y-p3y),p1x-p0x)+emul(-2*p2y+v0,emul(p0x-p3x,p1y-p3y)-emul(p1x-p3x,p0y-p3y))+emul(esqr(p0x-p3x)+esqr(p0y-p3y),p2x-p1x)+emul(esqr(p1x-p3x)+esqr(p1y-p3y),p0x-p2x)+emul(-2*p0y+v0,emul(p1x-p3x,p2y-p3y)-emul(p2x-p3x,p1y-p3y))+emul(-2*p1y+v0,emul(p2x-p3x,p0y-p3y)-emul(p0x-p3x,p2y-p3y));
        if (term) return f^(term>0); break; }
      case 36: {
        const auto term = esqr(p1x-p3x)+emul(p2x-p1x,-2*p3x+2*p0x)+esqr(p1y-p3y)-esqr(p2x-p3x)-esqr(p2y-p3y);
        if (term) return f^(term>0); break; }
      case 37: {
        const auto term = emul(p0x-p3x,-2*p3x+2*p2x)+emul(p0y-p3y,-2*p3y+2*p1y)-esqr(p0y-p3y)-esqr(p0x-p3x);
        if (term) return f^(term>0); break; }
      case 38: {
        const auto term = -2*p0x+2*p2x;
        if (term) return f^(term>0); break; }
      case 39: {
        const auto term = emul(p2y-p0y,-2*p3y+2*p1y)+esqr(p0x-p3x)+esqr(p0y-p3y)-esqr(p2x-p3x)-esqr(p2y-p3y);
        if (term) return f^(term>0); break; }
      case 40: {
        const auto term = -2*p3x+2*p0x;
        if (term) return f^(term>0); break; }
      case 41: {
        const auto term = p3x-p0x;
        if (term) return f^(term>0); break; }
      case 42: {
        const auto term = emul(p3x-p0x,-2*p3x+2*p1x)+emul(p3y-p0y,-2*p3y+2*p2y)+esqr(p0x-p3x)+esqr(p0y-p3y);
        if (term) return f^(term>0); break; }
      case 43: {
        const auto term = p2x-p0x;
        if (term) return f^(term>0); break; }
      case 44: {
        const auto v0 = 2*p3y;
        const auto term = esqr(p2x-p3x)+esqr(p2y-p3y)+emul(p3y-p0y,-2*p2y+v0)+emul(p0x-p2x,-2*p3x+2*p1x)+emul(p2y-p3y,-2*p0y+v0)-esqr(p0y-p3y)-esqr(p0x-p3x);
        if (term) return f^(term>0); break; }
      case 45: {
        const auto term = -2*p0x+2*p1x;
        if (term) return f^(term>0); break; }
      case 46: {
        const auto term = emul(p0y-p1y,-2*p3y+2*p2y)+esqr(p1x-p3x)+esqr(p1y-p3y)-esqr(p0y-p3y)-esqr(p0x-p3x);
        if (term) return f^(term>0); break; }
      case 47: {
        const auto term = p0x-p1x;
        if (term) return f^(term>0); break; }
      case 48: {
        const auto term = emul(p1x-p0x,-2*p3x+2*p2x)+esqr(p0x-p3x)+esqr(p0y-p3y)-esqr(p1y-p3y)-esqr(p1x-p3x);
        if (term) return f^(term>0); break; }
      default:
        OTHER_UNREACHABLE();
    }
  }
}

bool triangle_oriented(const int p0i, const Vector<exact::Int,2> p0, const int p1i, const Vector<exact::Int,2> p1, const int p2i, const Vector<exact::Int,2> p2) {
  // Evaluate constant term with exact integer arithmetic
  OTHER_UNUSED const exact::Int p0x(p0.x), p0y(p0.y), p1x(p1.x), p1y(p1.y), p2x(p2.x), p2y(p2.y);
  assert(p0x==p0.x && p0y==p0.y && p1x==p1.x && p1y==p1.y && p2x==p2.x && p2y==p2.y);
  const auto pred = emul(p1x-p0x,p2y-p0y)-emul(p2x-p0x,p1y-p0y);
  if (OTHER_EXPECT(bool(pred),true))
    return pred>0;

  // The constant term is exactly zero, so fall back to simulation of simplicity.
  return triangle_oriented_degenerate(p0i,p0,p1i,p1,p2i,p2);
}

static bool triangle_oriented_degenerate(const int p0i, const Vector<exact::Int,2> p0, const int p1i, const Vector<exact::Int,2> p1, const int p2i, const Vector<exact::Int,2> p2) {
  // Compute input permutation
  int order[3] = {p0i,p1i,p2i};
  const int permutation = permutation_id(3,order);

  // Losslessly cast to integers
  OTHER_UNUSED const exact::Int p0x(p0.x), p0y(p0.y), p1x(p1.x), p1y(p1.y), p2x(p2.x), p2y(p2.y);

  // The constant term is zero, so we add infinitesimal shifts to each coordinate in the input, expand
  // the result as a multivariate polynomial, and evaluate one term at a time until we hit a nonzero.
  // Each coordinate gets a unique infinitesimal, each infinitely smaller than the last, so cancellation
  // of all of them together is impossible.  In total, the error polynomial has 13 terms, of which 8 are
  // unique (up to sign), but it usually suffices to evaluate only a few.

  // Different permutations produce different predicates.  To reduce code size,
  // we use lookup tables and a switch statement.  I.e., a tiny bytecode interpreter.
  static const uint8_t starts[6] = {0,4,8,12,16,20};
  static const uint8_t terms[24] = {2,4,6,1,2,4,8,0,6,10,2,0,6,10,8,1,8,12,6,0,8,12,2,1};
  for (int i=starts[permutation];;i++) {
    const bool f = terms[i]&1;
    switch (terms[i]>>1) {
      case 0:
        return !f;
      case 1: {
        const auto term = p1y-p2y;
        if (term) return f^(term>0); break; }
      case 2: {
        const auto term = p2x-p1x;
        if (term) return f^(term>0); break; }
      case 3: {
        const auto term = p2y-p0y;
        if (term) return f^(term>0); break; }
      case 4: {
        const auto term = p0y-p1y;
        if (term) return f^(term>0); break; }
      case 5: {
        const auto term = p0x-p2x;
        if (term) return f^(term>0); break; }
      case 6: {
        const auto term = p1x-p0x;
        if (term) return f^(term>0); break; }
      default:
        OTHER_UNREACHABLE();
    }
  }
}

bool segment_directions_oriented(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int b0i, const Vector<exact::Int,2> b0, const int b1i, const Vector<exact::Int,2> b1) {
  // Evaluate constant term with exact integer arithmetic
  OTHER_UNUSED const exact::Int a0x(a0.x), a0y(a0.y), a1x(a1.x), a1y(a1.y), b0x(b0.x), b0y(b0.y), b1x(b1.x), b1y(b1.y);
  assert(a0x==a0.x && a0y==a0.y && a1x==a1.x && a1y==a1.y && b0x==b0.x && b0y==b0.y && b1x==b1.x && b1y==b1.y);
  const auto pred = emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x);
  if (OTHER_EXPECT(bool(pred),true))
    return pred>0;

  // The constant term is exactly zero, so fall back to simulation of simplicity.
  return segment_directions_oriented_degenerate(a0i,a0,a1i,a1,b0i,b0,b1i,b1);
}

static bool segment_directions_oriented_degenerate(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int b0i, const Vector<exact::Int,2> b0, const int b1i, const Vector<exact::Int,2> b1) {
  // Compute input permutation
  int order[4] = {a0i,a1i,b0i,b1i};
  const int permutation = permutation_id(4,order);

  // Losslessly cast to integers
  OTHER_UNUSED const exact::Int a0x(a0.x), a0y(a0.y), a1x(a1.x), a1y(a1.y), b0x(b0.x), b0y(b0.y), b1x(b1.x), b1y(b1.y);

  // The constant term is zero, so we add infinitesimal shifts to each coordinate in the input, expand
  // the result as a multivariate polynomial, and evaluate one term at a time until we hit a nonzero.
  // Each coordinate gets a unique infinitesimal, each infinitely smaller than the last, so cancellation
  // of all of them together is impossible.  In total, the error polynomial has 17 terms, of which 6 are
  // unique (up to sign), but it usually suffices to evaluate only a few.

  // Different permutations produce different predicates.  To reduce code size,
  // we use lookup tables and a switch statement.  I.e., a tiny bytecode interpreter.
  static const uint8_t starts[24] = {0,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60,64,68,72,76,80,84,88,92};
  static const uint8_t terms[96] = {3,5,6,1,3,5,7,0,3,5,6,1,3,5,6,1,3,5,7,0,3,5,7,0,2,4,6,0,2,4,7,1,2,4,6,0,2,4,6,0,2,4,7,1,2,4,7,1,6,8,2,1,6,8,2,1,6,8,3,0,6,8,3,0,6,8,3,0,6,8,2,1,7,9,2,0,7,9,2,0,7,9,2,0,7,9,3,1,7,9,3,1,7,9,3,1};
  for (int i=starts[permutation];;i++) {
    const bool f = terms[i]&1;
    switch (terms[i]>>1) {
      case 0:
        return !f;
      case 1: {
        const auto term = b1y-b0y;
        if (term) return f^(term>0); break; }
      case 2: {
        const auto term = b0x-b1x;
        if (term) return f^(term>0); break; }
      case 3: {
        const auto term = a1y-a0y;
        if (term) return f^(term>0); break; }
      case 4: {
        const auto term = a0x-a1x;
        if (term) return f^(term>0); break; }
      default:
        OTHER_UNREACHABLE();
    }
  }
}

bool segment_intersections_ordered_helper(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int b0i, const Vector<exact::Int,2> b0, const int b1i, const Vector<exact::Int,2> b1, const int c0i, const Vector<exact::Int,2> c0, const int c1i, const Vector<exact::Int,2> c1) {
  // Evaluate constant term with exact integer arithmetic
  OTHER_UNUSED const exact::Int a0x(a0.x), a0y(a0.y), a1x(a1.x), a1y(a1.y), b0x(b0.x), b0y(b0.y), b1x(b1.x), b1y(b1.y), c0x(c0.x), c0y(c0.y), c1x(c1.x), c1y(c1.y);
  assert(a0x==a0.x && a0y==a0.y && a1x==a1.x && a1y==a1.y && b0x==b0.x && b0y==b0.y && b1x==b1.x && b1y==b1.y && c0x==c0.x && c0y==c0.y && c1x==c1.x && c1y==c1.y);
  const auto pred = emul(emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x),emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))-emul(emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x),emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
  if (OTHER_EXPECT(bool(pred),true))
    return pred>0;

  // The constant term is exactly zero, so fall back to simulation of simplicity.
  return segment_intersections_ordered_helper_degenerate(a0i,a0,a1i,a1,b0i,b0,b1i,b1,c0i,c0,c1i,c1);
}

static bool segment_intersections_ordered_helper_degenerate(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int b0i, const Vector<exact::Int,2> b0, const int b1i, const Vector<exact::Int,2> b1, const int c0i, const Vector<exact::Int,2> c0, const int c1i, const Vector<exact::Int,2> c1) {
  // Compute input permutation
  int order[6] = {a0i,a1i,b0i,b1i,c0i,c1i};
  const int permutation = permutation_id(6,order);

  // Losslessly cast to integers
  OTHER_UNUSED const exact::Int a0x(a0.x), a0y(a0.y), a1x(a1.x), a1y(a1.y), b0x(b0.x), b0y(b0.y), b1x(b1.x), b1y(b1.y), c0x(c0.x), c0y(c0.y), c1x(c1.x), c1y(c1.y);

  // The constant term is zero, so we add infinitesimal shifts to each coordinate in the input, expand
  // the result as a multivariate polynomial, and evaluate one term at a time until we hit a nonzero.
  // Each coordinate gets a unique infinitesimal, each infinitely smaller than the last, so cancellation
  // of all of them together is impossible.  In total, the error polynomial has 264 terms, of which 120 are
  // unique (up to sign), but it usually suffices to evaluate only a few.

  // Different permutations produce different predicates.  To reduce code size,
  // we use lookup tables and a switch statement.  I.e., a tiny bytecode interpreter.
  static const uint16_t starts[720] = {0,19,38,57,76,95,114,133,152,171,190,209,228,247,266,285,304,323,342,361,380,399,418,437,456,469,482,495,508,521,534,547,560,573,586,599,612,625,638,651,664,677,690,703,716,729,742,755,768,781,794,807,820,833,846,859,872,885,898,911,924,937,950,963,976,989,1002,1015,1028,1041,1054,1067,1080,1093,1106,1119,1132,1145,1158,1171,1184,1197,1210,1223,1236,1249,1262,1275,1288,1301,1314,1327,1340,1353,1366,1379,1392,1405,1418,1431,1444,1457,1470,1483,1496,1509,1522,1535,1548,1561,1574,1587,1600,1613,1626,1639,1652,1665,1678,1691,1704,1724,1744,1764,1784,1804,1824,1844,1864,1884,1904,1924,1944,1964,1984,2004,2024,2044,2064,2084,2104,2124,2144,2164,2184,2207,2230,2253,2276,2299,2322,2345,2368,2391,2414,2437,2460,2494,2528,2562,2596,2630,2664,2698,2732,2766,2800,2834,2868,2891,2914,2937,2960,2983,3006,3029,3052,3075,3098,3121,3144,3178,3212,3246,3280,3314,3348,3382,3416,3450,3484,3518,3552,3586,3620,3654,3688,3722,3756,3790,3824,3858,3892,3926,3960,3983,4006,4029,4052,4075,4098,4121,4144,4167,4190,4213,4236,4270,4304,4338,4372,4406,4440,4474,4508,4542,4576,4610,4644,4667,4690,4713,4736,4759,4782,4805,4828,4851,4874,4897,4920,4941,4962,4983,5004,5025,5046,5067,5088,5109,5130,5151,5172,5204,5236,5268,5300,5334,5368,5400,5432,5466,5500,5532,5564,5577,5590,5603,5616,5629,5642,5655,5668,5681,5694,5707,5720,5733,5746,5759,5772,5785,5798,5811,5824,5837,5850,5863,5876,5900,5924,5948,5972,5996,6020,6044,6068,6092,6116,6140,6164,6193,6222,6251,6280,6318,6356,6385,6414,6452,6490,6519,6548,6570,6592,6614,6636,6658,6680,6713,6746,6779,6812,6854,6896,6928,6960,6996,7032,7064,7096,7138,7180,7213,7246,7279,7312,7334,7356,7378,7400,7422,7444,7477,7510,7552,7594,7627,7660,7702,7744,7777,7810,7843,7876,7908,7940,7972,8004,8040,8076,8097,8118,8139,8160,8181,8202,8223,8244,8265,8286,8307,8328,8360,8392,8424,8456,8490,8524,8556,8588,8622,8656,8688,8720,8744,8768,8792,8816,8840,8864,8888,8912,8936,8960,8984,9008,9037,9066,9095,9124,9162,9200,9229,9258,9296,9334,9363,9392,9405,9418,9431,9444,9457,9470,9483,9496,9509,9522,9535,9548,9561,9574,9587,9600,9613,9626,9639,9652,9665,9678,9691,9704,9737,9770,9803,9836,9878,9920,9942,9964,9986,10008,10030,10052,10088,10124,10156,10188,10220,10252,10285,10318,10351,10384,10426,10468,10501,10534,10576,10618,10651,10684,10706,10728,10750,10772,10794,10816,10849,10882,10924,10966,10999,11032,11068,11104,11136,11168,11200,11232,11266,11300,11332,11364,11396,11428,11462,11496,11528,11560,11592,11624,11645,11666,11687,11708,11729,11750,11771,11792,11813,11834,11855,11876,11908,11940,11976,12012,12044,12076,12109,12142,12175,12208,12250,12292,12314,12336,12358,12380,12402,12424,12466,12508,12541,12574,12607,12640,12673,12706,12739,12772,12814,12856,12888,12920,12956,12992,13024,13056,13078,13100,13122,13144,13166,13188,13221,13254,13287,13320,13362,13404,13417,13430,13443,13456,13469,13482,13495,13508,13521,13534,13547,13560,13573,13586,13599,13612,13625,13638,13651,13664,13677,13690,13703,13716,13754,13792,13821,13850,13879,13908,13946,13984,14013,14042,14071,14100,14124,14148,14172,14196,14220,14244,14268,14292,14316,14340,14364,14388,14422,14456,14488,14520,14552,14584,14618,14652,14684,14716,14748,14780,14801,14822,14843,14864,14885,14906,14927,14948,14969,14990,15011,15032,15064,15096,15128,15160,15196,15232,15265,15298,15340,15382,15415,15448,15490,15532,15565,15598,15631,15664,15686,15708,15730,15752,15774,15796,15829,15862,15904,15946,15979,16012,16044,16076,16108,16140,16176,16212,16245,16278,16320,16362,16395,16428,16450,16472,16494,16516,16538,16560,16598,16636,16665,16694,16723,16752,16790,16828,16857,16886,16915,16944,16968,16992,17016,17040,17064,17088,17112,17136,17160,17184,17208,17232,17245,17258,17271,17284,17297,17310,17323,17336,17349,17362,17375,17388,17401,17414,17427,17440,17453,17466,17479,17492,17505,17518,17531};
  static const uint8_t terms[17544] = {};
  for (int i=starts[permutation];;i++) {
    const bool f = terms[i]&1;
    switch (terms[i]>>1) {
      case 0:
        return !f;
      case 1: {
        const auto term = emul(c0y-c1y,emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x))+emul(c0y-c1y,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))-emul(b0y-b1y,emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x))-emul(b0y-b1y,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 2: {
        const auto term = emul(c0y-c1y,c1y-c0y)-emul(b0y-b1y,b1y-b0y);
        if (term) return f^(term>0); break; }
      case 3: {
        const auto term = emul(c1x-c0x,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))+emul(c1x-c0x,emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x))-emul(b1x-b0x,emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x))-emul(b1x-b0x,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 4: {
        const auto term = emul(-2*(b0y-b1y),b1x-b0x)+emul(2*(c0y-c1y),c1x-c0x);
        if (term) return f^(term>0); break; }
      case 5: {
        const auto term = esqr(c1x-c0x)-esqr(b1x-b0x);
        if (term) return f^(term>0); break; }
      case 6: {
        const auto term = emul(c1y-c0y,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))-emul(b1y-b0y,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 7: {
        const auto term = emul(c0x-c1x,c0y-c1y)-emul(b0x-b1x,b0y-b1y);
        if (term) return f^(term>0); break; }
      case 8: {
        const auto term = emul(c0x-c1x,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))-emul(b0x-b1x,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 9: {
        const auto term = emul(a0y-b1y,emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x))-emul(a1y-a0y,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 10: {
        const auto term = emul(a0y-a1y,b0y-b1y)-emul(b0y-b1y,b1y-a0y);
        if (term) return f^(term>0); break; }
      case 11: {
        const auto term = emul(a1x-a0x,b1y-b0y)+emul(-2*(a1y-a0y),b1x-b0x)+emul(b0x-a0x,b1y-b0y)-emul(b1y-a0y,b1x-b0x)-emul(b0y-a0y,b1x-b0x);
        if (term) return f^(term>0); break; }
      case 12: {
        const auto term = -2*b0y+2*b1y;
        if (term) return f^(term>0); break; }
      case 13: {
        const auto term = -2*b0x+2*b1x;
        if (term) return f^(term>0); break; }
      case 14: {
        const auto term = emul(a0y-b1y,b1y-b0y);
        if (term) return f^(term>0); break; }
      case 15: {
        const auto term = b1y-b0y;
        if (term) return f^(term>0); break; }
      case 16: {
        const auto term = emul(b0y-a0y,b1x-b0x)-emul(b0x-b1x,b1y-a0y)-emul(b0x-a0x,b1y-b0y);
        if (term) return f^(term>0); break; }
      case 17: {
        const auto term = emul(a0y-a1y,b1y-a0y);
        if (term) return f^(term>0); break; }
      case 18: {
        const auto term = a1y+-2*a0y+b1y;
        if (term) return f^(term>0); break; }
      case 19: {
        const auto term = emul(b0y-a0y,emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x))-emul(a0y-a1y,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 20: {
        const auto term = emul(a1y-a0y,b0y-b1y)-emul(a0y-b0y,b0y-b1y);
        if (term) return f^(term>0); break; }
      case 21: {
        const auto term = emul(a1y-a0y,b1x-b0x)+emul(b0y-a0y,b1x-b0x)-emul(b0x-a0x,b1y-b0y)-emul(a1x-a0x,b1y-b0y)-emul(a0y-a1y,b1x-b0x)-emul(a0y-b0y,b1x-b0x);
        if (term) return f^(term>0); break; }
      case 22: {
        const auto term = emul(b0y-a0y,b1y-b0y);
        if (term) return f^(term>0); break; }
      case 23: {
        const auto term = emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x)-emul(b0y-a0y,b1x-b0x);
        if (term) return f^(term>0); break; }
      case 24: {
        const auto term = emul(a1y-a0y,a0y-b0y);
        if (term) return f^(term>0); break; }
      case 25: {
        const auto term = 2*a0y-b0y-a1y;
        if (term) return f^(term>0); break; }
      case 26: {
        const auto term = emul(c1y-a0y,emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x))+emul(a1y-a0y,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x));
        if (term) return f^(term>0); break; }
      case 27: {
        const auto term = emul(a1y-a0y,c0y-c1y)+emul(c0y-c1y,c1y-a0y);
        if (term) return f^(term>0); break; }
      case 28: {
        const auto term = emul(c0y-a0y,c1x-c0x)+emul(c1x-c0x,c1y-a0y)+emul(2*(a1y-a0y),c1x-c0x)-emul(c0x-a0x,c1y-c0y)-emul(a1x-a0x,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 29: {
        const auto term = -2*c0y+2*c1y;
        if (term) return f^(term>0); break; }
      case 30: {
        const auto term = -2*c0x+2*c1x;
        if (term) return f^(term>0); break; }
      case 31: {
        const auto term = emul(c1y-a0y,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 32: {
        const auto term = c0y-c1y;
        if (term) return f^(term>0); break; }
      case 33: {
        const auto term = emul(c0x-a0x,c1y-c0y)+emul(c0x-c1x,c1y-a0y)-emul(c0y-a0y,c1x-c0x);
        if (term) return f^(term>0); break; }
      case 34: {
        const auto term = emul(a1y-a0y,c1y-a0y);
        if (term) return f^(term>0); break; }
      case 35: {
        const auto term = 2*a0y-c1y-a1y;
        if (term) return f^(term>0); break; }
      case 36: {
        const auto term = emul(a0y-a1y,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))+emul(a0y-c0y,emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x));
        if (term) return f^(term>0); break; }
      case 37: {
        const auto term = emul(a0y-a1y,c0y-c1y)+emul(a0y-c0y,c0y-c1y);
        if (term) return f^(term>0); break; }
      case 38: {
        const auto term = emul(c0x-a0x,c1y-c0y)+emul(a0y-a1y,c1x-c0x)+emul(a1x-a0x,c1y-c0y)+emul(a0y-c0y,c1x-c0x)-emul(c0y-a0y,c1x-c0x)-emul(a1y-a0y,c1x-c0x);
        if (term) return f^(term>0); break; }
      case 39: {
        const auto term = emul(a0y-c0y,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 40: {
        const auto term = emul(c0y-a0y,c1x-c0x)+emul(c0y-a0y,c1x-c0x)-emul(c0x-a0x,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 41: {
        const auto term = emul(a0y-a1y,a0y-c0y);
        if (term) return f^(term>0); break; }
      case 42: {
        const auto term = 2*a0y-c0y-a1y;
        if (term) return f^(term>0); break; }
      case 43: {
        const auto term = b1y-a0y;
        if (term) return f^(term>0); break; }
      case 44: {
        const auto term = b0y-a0y;
        if (term) return f^(term>0); break; }
      case 45: {
        const auto term = c1y-a0y;
        if (term) return f^(term>0); break; }
      case 46: {
        const auto term = c0y-a0y;
        if (term) return f^(term>0); break; }
      case 47: {
        const auto term = emul(a1x-a0x,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x))-emul(a0x-b1x,emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 48: {
        const auto term = emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x)-emul(a0x-b1x,b1y-b0y);
        if (term) return f^(term>0); break; }
      case 49: {
        const auto term = emul(b1x-a0x,b0x-b1x);
        if (term) return f^(term>0); break; }
      case 50: {
        const auto term = emul(b1x-a0x,a1y-a0y)-emul(a0x-a1x,b1y-a0y);
        if (term) return f^(term>0); break; }
      case 51: {
        const auto term = b1x-a0x;
        if (term) return f^(term>0); break; }
      case 52: {
        const auto term = emul(a1x-a0x,a0x-b1x);
        if (term) return f^(term>0); break; }
      case 53: {
        const auto term = emul(a1y-a0y,b1x-b0x)+emul(b0y-a0y,b1x-b0x)-emul(b0x-a0x,b1y-b0y)-emul(a1x-a0x,b1y-b0y)-emul(a1x-a0x,b1y-b0y)-emul(a0x-b1x,b0y-b1y);
        if (term) return f^(term>0); break; }
      case 54: {
        const auto term = b1x-b0x;
        if (term) return f^(term>0); break; }
      case 55: {
        const auto term = emul(b0y-a0y,a1y-a0y)-emul(a0y-a1y,b1y-a0y);
        if (term) return f^(term>0); break; }
      case 56: {
        const auto term = -2*a0y+b1y+b0y;
        if (term) return f^(term>0); break; }
      case 57: {
        const auto term = emul(a1x-a0x,b1y-b0y)-emul(a0x-b1x,a0y-a1y)-emul(a0x-a1x,a0y-b0y)-emul(a1y-a0y,b1x-b0x);
        if (term) return f^(term>0); break; }
      case 58: {
        const auto term = a0y+-2*b0y+b1y;
        if (term) return f^(term>0); break; }
      case 59: {
        const auto term = a0x+b0x+-2*b1x;
        if (term) return f^(term>0); break; }
      case 60: {
        const auto term = a0y-a1y;
        if (term) return f^(term>0); break; }
      case 61: {
        const auto term = emul(a0x-a1x,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x))+emul(a0x-c1x,emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x));
        if (term) return f^(term>0); break; }
      case 62: {
        const auto term = emul(c0y-a0y,c1x-c0x)+emul(a0x-c1x,c1y-c0y)-emul(c0x-a0x,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 63: {
        const auto term = emul(a0x-c1x,c0x-c1x);
        if (term) return f^(term>0); break; }
      case 64: {
        const auto term = emul(a0x-c1x,a1y-a0y)+emul(a0x-a1x,c1y-a0y);
        if (term) return f^(term>0); break; }
      case 65: {
        const auto term = a0x-c1x;
        if (term) return f^(term>0); break; }
      case 66: {
        const auto term = emul(a0x-a1x,a0x-c1x);
        if (term) return f^(term>0); break; }
      case 67: {
        const auto term = emul(a0y-a1y,c1y-a0y)+emul(a0y-c0y,a1y-a0y);
        if (term) return f^(term>0); break; }
      case 68: {
        const auto term = 2*a0y-c1y-c0y;
        if (term) return f^(term>0); break; }
      case 69: {
        const auto term = emul(a0x-c1x,a0y-a1y)+emul(a0x-a1x,a0y-c0y)+emul(a1y-a0y,c1x-c0x)-emul(a1x-a0x,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 70: {
        const auto term = 2*c0y-c1y-a0y;
        if (term) return f^(term>0); break; }
      case 71: {
        const auto term = 2*c1x-c0x-a0x;
        if (term) return f^(term>0); break; }
      case 72: {
        const auto term = emul(c0x-a0x,emul(a1x-a0x,c1y-c0y)-emul(a1y-a0y,c1x-c0x))+emul(a1x-a0x,emul(c0x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x));
        if (term) return f^(term>0); break; }
      case 73: {
        const auto term = emul(2*(c0x-a0x),c1y-c0y)-emul(c0y-a0y,c1x-c0x);
        if (term) return f^(term>0); break; }
      case 74: {
        const auto term = emul(c0x-a0x,c0x-c1x);
        if (term) return f^(term>0); break; }
      case 75: {
        const auto term = emul(a0y-c0y,a1x-a0x)+emul(a0y-a1y,c0x-a0x);
        if (term) return f^(term>0); break; }
      case 76: {
        const auto term = a0x-c0x;
        if (term) return f^(term>0); break; }
      case 77: {
        const auto term = emul(a1x-a0x,c0x-a0x);
        if (term) return f^(term>0); break; }
      case 78: {
        const auto term = emul(a1x-a0x,c1y-c0y)+emul(a1y-a0y,c0x-a0x)+emul(a1x-a0x,c1y-a0y)-emul(a1y-a0y,c1x-c0x);
        if (term) return f^(term>0); break; }
      case 79: {
        const auto term = 2*c1y-c0y-a0y;
        if (term) return f^(term>0); break; }
      case 80: {
        const auto term = 2*c0x-c1x-a0x;
        if (term) return f^(term>0); break; }
      case 81: {
        const auto term = emul(a0x-a1x,emul(b0x-a0x,b1y-b0y)-emul(b0y-a0y,b1x-b0x))-emul(b0x-a0x,emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b1x-b0x));
        if (term) return f^(term>0); break; }
      case 82: {
        const auto term = emul(-2*(b0x-a0x),b1y-b0y)+emul(b0y-a0y,b1x-b0x);
        if (term) return f^(term>0); break; }
      case 83: {
        const auto term = emul(a0x-b0x,b0x-b1x);
        if (term) return f^(term>0); break; }
      case 84: {
        const auto term = emul(b0y-a0y,a1x-a0x)-emul(a0y-a1y,b0x-a0x);
        if (term) return f^(term>0); break; }
      case 85: {
        const auto term = a0x-b0x;
        if (term) return f^(term>0); break; }
      case 86: {
        const auto term = emul(a0x-a1x,b0x-a0x);
        if (term) return f^(term>0); break; }
      case 87: {
        const auto term = emul(a1y-a0y,b1x-b0x)-emul(a1x-a0x,b1y-a0y)-emul(a1x-a0x,b1y-b0y)-emul(a1y-a0y,b0x-a0x);
        if (term) return f^(term>0); break; }
      case 88: {
        const auto term = a0y+b0y+-2*b1y;
        if (term) return f^(term>0); break; }
      case 89: {
        const auto term = a0x+-2*b0x+b1x;
        if (term) return f^(term>0); break; }
      case 90: {
        const auto term = emul(a1x-a0x,b1y-b0y)+emul(b0x-a0x,b1y-b0y)-emul(a1x-a0x,b0y-b1y)-emul(a1y-a0y,b1x-b0x)-emul(b0y-a0y,b1x-b0x)-emul(b0x-a0x,b0y-b1y);
        if (term) return f^(term>0); break; }
      case 91: {
        const auto term = emul(a0x-c1x,c0y-c1y)+emul(a1x-a0x,c1y-c0y)+emul(c0x-a0x,c1y-c0y)+emul(a1x-a0x,c1y-c0y)-emul(c0y-a0y,c1x-c0x)-emul(a1y-a0y,c1x-c0x);
        if (term) return f^(term>0); break; }
      case 92: {
        const auto term = c1x-c0x;
        if (term) return f^(term>0); break; }
      case 93: {
        const auto term = emul(c0y-a0y,c1x-c0x)+emul(a1x-a0x,c0y-c1y)+emul(c0x-a0x,c0y-c1y)+emul(a1y-a0y,c1x-c0x)-emul(c0x-a0x,c1y-c0y)-emul(a1x-a0x,c1y-c0y);
        if (term) return f^(term>0); break; }
      case 94: {
        const auto term = a1x+-2*a0x+b1x;
        if (term) return f^(term>0); break; }
      case 95: {
        const auto term = a0x-a1x;
        if (term) return f^(term>0); break; }
      case 96: {
        const auto term = emul(b1x-a0x,a1x-a0x)-emul(a0x-a1x,b0x-a0x);
        if (term) return f^(term>0); break; }
      case 97: {
        const auto term = a1y+2*b0y+-2*a0y-b1y;
        if (term) return f^(term>0); break; }
      case 98: {
        const auto term = emul(a0x-a1x,c0x-a0x)+emul(a0x-c1x,a1x-a0x);
        if (term) return f^(term>0); break; }
      case 99: {
        const auto term = a1x+c1x+-2*a0x;
        if (term) return f^(term>0); break; }
      case 100: {
        const auto term = -2*c0y+c1y+2*a0y-a1y;
        if (term) return f^(term>0); break; }
      case 101: {
        const auto term = a1x+c0x+-2*a0x;
        if (term) return f^(term>0); break; }
      case 102: {
        const auto term = c0y+-2*c1y+2*a0y-a1y;
        if (term) return f^(term>0); break; }
      case 103: {
        const auto term = 2*a0x-b0x-a1x;
        if (term) return f^(term>0); break; }
      case 104: {
        const auto term = a1y+-2*a0y+2*b1y-b0y;
        if (term) return f^(term>0); break; }
      default:
        OTHER_UNREACHABLE();
    }
  }
}

bool segment_to_direction_oriented(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int di, const Vector<exact::Int,2> d) {
  // Evaluate constant term with exact integer arithmetic
  OTHER_UNUSED const exact::Int a0x(a0.x), a0y(a0.y), a1x(a1.x), a1y(a1.y), dx(d.x), dy(d.y);
  assert(a0x==a0.x && a0y==a0.y && a1x==a1.x && a1y==a1.y && dx==d.x && dy==d.y);
  const auto pred = emul(dy,a1x-a0x)-emul(dx,a1y-a0y);
  if (OTHER_EXPECT(bool(pred),true))
    return pred>0;

  // The constant term is exactly zero, so fall back to simulation of simplicity.
  return segment_to_direction_oriented_degenerate(a0i,a0,a1i,a1,di,d);
}

static bool segment_to_direction_oriented_degenerate(const int a0i, const Vector<exact::Int,2> a0, const int a1i, const Vector<exact::Int,2> a1, const int di, const Vector<exact::Int,2> d) {
  // Compute input permutation
  int order[3] = {a0i,a1i,di};
  const int permutation = permutation_id(3,order);

  // Losslessly cast to integers
  OTHER_UNUSED const exact::Int a0x(a0.x), a0y(a0.y), a1x(a1.x), a1y(a1.y), dx(d.x), dy(d.y);

  // The constant term is zero, so we add infinitesimal shifts to each coordinate in the input, expand
  // the result as a multivariate polynomial, and evaluate one term at a time until we hit a nonzero.
  // Each coordinate gets a unique infinitesimal, each infinitely smaller than the last, so cancellation
  // of all of them together is impossible.  In total, the error polynomial has 11 terms, of which 6 are
  // unique (up to sign), but it usually suffices to evaluate only a few.

  // Different permutations produce different predicates.  To reduce code size,
  // we use lookup tables and a switch statement.  I.e., a tiny bytecode interpreter.
  static const uint8_t starts[6] = {0,4,8,12,16,20};
  static const uint8_t terms[24] = {2,4,6,0,2,4,6,0,3,5,6,1,3,5,6,1,6,8,3,0,6,8,2,1};
  for (int i=starts[permutation];;i++) {
    const bool f = terms[i]&1;
    switch (terms[i]>>1) {
      case 0:
        return !f;
      case 1: {
        const auto term = -dy;
        if (term) return f^(term>0); break; }
      case 2: {
        const auto term = dx;
        if (term) return f^(term>0); break; }
      case 3: {
        const auto term = a0y-a1y;
        if (term) return f^(term>0); break; }
      case 4: {
        const auto term = a1x-a0x;
        if (term) return f^(term>0); break; }
      default:
        OTHER_UNREACHABLE();
    }
  }
}

bool directions_oriented(const int d0i, const Vector<exact::Int,2> d0, const int d1i, const Vector<exact::Int,2> d1) {
  // Evaluate constant term with exact integer arithmetic
  OTHER_UNUSED const exact::Int d0x(d0.x), d0y(d0.y), d1x(d1.x), d1y(d1.y);
  assert(d0x==d0.x && d0y==d0.y && d1x==d1.x && d1y==d1.y);
  const auto pred = emul(d0x,d1y)-emul(d0y,d1x);
  if (OTHER_EXPECT(bool(pred),true))
    return pred>0;

  // The constant term is exactly zero, so fall back to simulation of simplicity.
  return directions_oriented_degenerate(d0i,d0,d1i,d1);
}

static bool directions_oriented_degenerate(const int d0i, const Vector<exact::Int,2> d0, const int d1i, const Vector<exact::Int,2> d1) {
  // Compute input permutation
  int order[2] = {d0i,d1i};
  const int permutation = permutation_id(2,order);

  // Losslessly cast to integers
  OTHER_UNUSED const exact::Int d0x(d0.x), d0y(d0.y), d1x(d1.x), d1y(d1.y);

  // The constant term is zero, so we add infinitesimal shifts to each coordinate in the input, expand
  // the result as a multivariate polynomial, and evaluate one term at a time until we hit a nonzero.
  // Each coordinate gets a unique infinitesimal, each infinitely smaller than the last, so cancellation
  // of all of them together is impossible.  In total, the error polynomial has 7 terms, of which 6 are
  // unique (up to sign), but it usually suffices to evaluate only a few.

  // Different permutations produce different predicates.  To reduce code size,
  // we use lookup tables and a switch statement.  I.e., a tiny bytecode interpreter.
  static const uint8_t starts[2] = {0,4};
  static const uint8_t terms[8] = {2,4,6,1,6,8,2,0};
  for (int i=starts[permutation];;i++) {
    const bool f = terms[i]&1;
    switch (terms[i]>>1) {
      case 0:
        return !f;
      case 1: {
        const auto term = d1y;
        if (term) return f^(term>0); break; }
      case 2: {
        const auto term = -d1x;
        if (term) return f^(term>0); break; }
      case 3: {
        const auto term = -d0y;
        if (term) return f^(term>0); break; }
      case 4: {
        const auto term = d0x;
        if (term) return f^(term>0); break; }
      default:
        OTHER_UNREACHABLE();
    }
  }
}

}
